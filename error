def search(self, query: str, top_k: int = 5) -> List[Dict]:
        logger.info(f"[VectorStoreAgent] üîé Searching for: '{query}' in '{self.collection_name}'")

        embedding_client = AzureOpenAI(
            api_key=os.getenv("AZURE_OPENAI_API_KEY"),
            azure_endpoint=os.getenv("AZURE_OPENAI_ENDPOINT"),
            api_version=os.getenv("AZURE_OPENAI_EMBEDDING_API_VERSION")
        )
        deployment = os.getenv("AZURE_OPENAI_EMBEDDING_DEPLOYMENT")

        # Retry loop for 429 errors
        delay = 2
        for attempt in range(5):
            try:
                response = embedding_client.embeddings.create(input=query, model=deployment)
                break
            except Exception as e:
                if "429" in str(e):
                    logger.warning(f"[VectorStoreAgent] ‚ö†Ô∏è 429 during search embed: attempt {attempt+1}/5, retrying in {delay}s...")
                    time.sleep(delay + random.uniform(0, 1))
                    delay = min(delay * 2, 30)
                else:
                    logger.error(f"[VectorStoreAgent] ‚ùå Non-429 search error: {type(e).__name__}: {e}")
                    return []
        else:
            logger.error("[VectorStoreAgent] ‚ùå Max retries exceeded while embedding query.")
            return []

        query_vector = response.data[0].embedding

        results = self.client.search(
            collection_name=self.collection_name,
            query_vector=query_vector,
            limit=top_k,
            with_payload=True
        )

        output = []
        preview_lines = []
        # for idx, hit in enumerate(results):
        #     text_preview = hit.payload.get("text", "")[:120].replace("\n", " ")
        #     metadata = hit.payload
        #     output.append({
        #         "score": hit.score,
        #         "text": hit.payload.get("text", ""),
        #         "metadata": metadata
        #     })
        #     preview_lines.append(
        #         f"  {idx+1}. score={hit.score:.4f} | preview='{text_preview}...' | meta={ {k:v for k,v in metadata.items() if k!='text'} }"
        #     )

        # if preview_lines:
        #     logger.info("[VectorStoreAgent] üìä Retrieved top chunks:\n" + "\n".join(preview_lines))
        # else:
        #     logger.warning("[VectorStoreAgent] ‚ö†Ô∏è No results found in search.")

        # return output
        for idx, hit in enumerate(results):
            text_preview = hit.payload.get("text", "")[:120].replace("\n", " ")
            metadata = hit.payload
            output.append({
                "score": hit.score,
                "text": hit.payload.get("text", ""),
                "metadata": metadata
            })

        # üîá no logging of every hit
        return output
